# Absolute.
MemAbsRead8: !$imm16    is imm16  {
    local offset16:2 = imm16;
    local offset:4 = zext(offset16);
    local data:1; read_data_bank(data, offset);
    export data;
}
MemAbsRead16: !$imm16    is imm16  {
    local offset16:2 = imm16;
    local offset:4 = zext(offset16);
    local data_lo:1; read_data_bank(data_lo, offset);
    local data_hi:1; read_data_bank(data_hi, offset + 1);
    $(DATA_EXPORT16);
}

# Absolute indexed by X.
# Indexing allows the access to cross bank boundaries, and even works if the access straddles
# the boundary.
MemAbsIdxXRead8: !$imm16,"X"    is imm16 & IdxX  {
    local offset16:2 = imm16;
    local offset:4 = zext(offset16) + zext(IdxX);
    local data:1; read_data_bank(data, offset);
    export data;
}
MemAbsIdxXRead16: !$imm16,"X"    is imm16 & IdxX  {
    local offset16:2 = imm16;
    local offset:4 = zext(offset16) + zext(IdxX);
    local data_lo:1; read_data_bank(data_lo, offset);
    local data_hi:1; read_data_bank(data_hi, offset + 1);
    $(DATA_EXPORT16);
}

# Absolute indexed by Y.
# Indexing allows the access to cross bank boundaries, and even works if the access straddles
# the boundary.
MemAbsIdxYRead8: !$imm16,"Y"    is imm16 & IdxY  {
    local offset16:2 = imm16;
    local offset:4 = zext(offset16) + zext(IdxY);
    local data:1; read_data_bank(data, offset);
    export data;
}
MemAbsIdxYRead16: !$imm16,"Y"    is imm16 & IdxY  {
    local offset16:2 = imm16;
    local offset:4 = zext(offset16) + zext(IdxY);
    local data_lo:1; read_data_bank(data_lo, offset);
    local data_hi:1; read_data_bank(data_hi, offset + 1);
    $(DATA_EXPORT16);
}

# Absolute long.
MemAbsLongRead8: !>$imm24    is imm24  {
    local ea:3 = imm24;
    $(DEREF_EA_EXPORT8);
}
MemAbsLongRead16: !>$imm24    is imm24  {
    local ea_lo:3 = imm24;
    local ea_hi:3 = ea_lo + 1;
    $(DEREF_EA_EXPORT16);
}

# Absolute long, indexed by X.
MemAbsLongIdxXRead8: !>$imm24,"X"    is imm24 & IdxX  {
    local base:3 = imm24;
    local ea:3 = base + zext(IdxX);
    $(DEREF_EA_EXPORT8);
}
MemAbsLongIdxXRead16: !>$imm24,"X"    is imm24 & IdxX  {
    local base:3 = imm24;
    local ea_lo:3 = base + zext(IdxX);
    local ea_hi:3 = ea_lo + 1;
    $(DEREF_EA_EXPORT16);
}

# Accumulator.
MemAccRead8: "A"    is epsilon  {
    data:1 = A;
    export data;
}
MemAccRead16: "A"    is epsilon  {
    data:2 = C;
    export data;
}

# Direct page.
# DP access may wrap in emulation mode.
MemDPRead8: <$imm8    is imm8  {
    local offset8:1 = imm8;
    local offset:4 = zext(offset8);
    local data:1; read_direct(data, offset);
    export data;
}
MemDPRead16: <$imm8    is imm8  {
    local offset8:1 = imm8;
    local offset:4 = zext(offset8);
    local data_lo:1; read_direct(data_lo, offset);
    local data_hi:1; read_direct(data_hi, offset + 1);
    $(DATA_EXPORT16);
}

# Direct page indexed by X.
# DP access may wrap in emulation mode.
MemDPIdxXRead8: <$imm8,"X"    is imm8 & IdxX  {
    local offset8:1 = imm8;
    local offset:4 = zext(offset8) + zext(IdxX);
    local data:1; read_direct(data, offset);
    export data;
}
MemDPIdxXRead16: <$imm8,"X"    is imm8 & IdxX  {
    local offset8:1 = imm8;
    local offset:4 = zext(offset8) + zext(IdxX);
    local data_lo:1; read_direct(data_lo, offset);
    local data_hi:1; read_direct(data_hi, offset + 1);
    $(DATA_EXPORT16);
}

# Direct page indexed by Y.
# DP access may wrap in emulation mode.
MemDPIdxYRead8: <$imm8,"Y"    is imm8 & IdxY  {
    local offset8:1 = imm8;
    local offset:4 = zext(offset8) + zext(IdxY);
    local data:1; read_direct(data, offset);
    export data;
}
MemDPIdxYRead16: <$imm8,"Y"    is imm8 & IdxY  {
    local offset8:1 = imm8;
    local offset:4 = zext(offset8) + zext(IdxY);
    local data_lo:1; read_direct(data_lo, offset);
    local data_hi:1; read_direct(data_hi, offset + 1);
    $(DATA_EXPORT16);
}

# Direct page indexed by X, indirect.
# DP access may wrap in emulation mode.
MemDPIdxIndRead8: (<$imm8,"X")    is imm8 & IdxX  {
    local offset8:1 = imm8;
    local offset:4 = zext(offset8) + zext(IdxX);

    local ind_lo:1; read_direct(ind_lo, offset);
    local ind_hi:1; read_direct(ind_hi, offset + 1);
    local ind:2; pack_lo_hi(ind, ind_lo, ind_hi);

    offset = zext(ind);
    local data:1; read_data_bank(data, offset);
    export data;
}
MemDPIdxIndRead16: (<$imm8,"X")    is imm8 & IdxX  {
    local offset8:1 = imm8;
    local offset:4 = zext(offset8) + zext(IdxX);

    local ind_lo:1; read_direct(ind_lo, offset);
    local ind_hi:1; read_direct(ind_hi, offset + 1);
    local ind:2; pack_lo_hi(ind, ind_lo, ind_hi);

    offset = zext(ind);
    local data_lo:1; read_data_bank(data_lo, offset);
    local data_hi:1; read_data_bank(data_hi, offset + 1);
    $(DATA_EXPORT16);
}

# Direct page indirect.
# DP access may wrap in emulation mode.
MemDPIndRead8: (<$imm8)    is imm8  {
    local offset8:1 = imm8;
    local offset:4 = zext(offset8);

    local ind_lo:1; read_direct(ind_lo, offset);
    local ind_hi:1; read_direct(ind_hi, offset + 1);
    local ind:2; pack_lo_hi(ind, ind_lo, ind_hi);

    offset = zext(ind);
    local data:1; read_data_bank(data, offset);
    export data;
}
MemDPIndRead16: (<$imm8)    is imm8  {
    local offset8:1 = imm8;
    local offset:4 = zext(offset8);

    local ind_lo:1; read_direct(ind_lo, offset);
    local ind_hi:1; read_direct(ind_hi, offset + 1);
    local ind:2; pack_lo_hi(ind, ind_lo, ind_hi);

    offset = zext(ind);
    local data_lo:1; read_data_bank(data_lo, offset);
    local data_hi:1; read_data_bank(data_hi, offset + 1);
    $(DATA_EXPORT16);
}

# Direct page indirect long.
# No special wrapping.
MemDPIndLongRead8: [<$imm8]    is imm8  {
    local offset8:1 = imm8;
    local offset:4 = zext(offset8);

    local ind_lo:1; read_direct_noemu(ind_lo, offset);
    local ind_hi:1; read_direct_noemu(ind_hi, offset + 1);
    local ind_bank:1; read_direct_noemu(ind_bank, offset + 2);

    local ea:3 = (ind_bank << 16) | (ind_hi << 8) | ind_lo;
    $(DEREF_EA_EXPORT8);
}
MemDPIndLongRead16: [<$imm8]    is imm8  {
    local offset8:1 = imm8;
    local offset:4 = zext(offset8);

    local ind_lo:1; read_direct_noemu(ind_lo, offset);
    local ind_hi:1; read_direct_noemu(ind_hi, offset + 1);
    local ind_bank:1; read_direct_noemu(ind_bank, offset + 2);

    local ea_lo:3 = (ind_bank << 16) | (ind_hi << 8) | ind_lo;
    local ea_hi:3 = ea_lo + 1;
    $(DEREF_EA_EXPORT16);
}

# Direct page indirect, indexed by Y.
# DP access may wrap in emulation mode.
MemDPIndIdxRead8: (<$imm8),"Y"    is imm8 & IdxY  {
    local offset8:1 = imm8;
    local offset:4 = zext(offset8);

    local ind_lo:1; read_direct(ind_lo, offset);
    local ind_hi:1; read_direct(ind_hi, offset + 1);
    local ind:2; pack_lo_hi(ind, ind_lo, ind_hi);

    offset = zext(ind) + zext(IdxY);
    local data:1; read_data_bank(data, offset);
    export data;
}
MemDPIndIdxRead16: (<$imm8),"Y"    is imm8 & IdxY  {
    local offset8:1 = imm8;
    local offset:4 = zext(offset8);

    local ind_lo:1; read_direct(ind_lo, offset);
    local ind_hi:1; read_direct(ind_hi, offset + 1);
    local ind:2; pack_lo_hi(ind, ind_lo, ind_hi);

    offset = zext(ind) + zext(IdxY);
    local data_lo:1; read_data_bank(data_lo, offset);
    local data_hi:1; read_data_bank(data_hi, offset + 1);
    $(DATA_EXPORT16);
}

# Direct page indirect long, indexed by Y.
# No special wrapping.
MemDPIndLongIdxRead8: [<$imm8],"Y"    is imm8 & IdxY  {
    local offset8:1 = imm8;
    local offset:4 = zext(offset8);

    local ind_lo:1; read_direct_noemu(ind_lo, offset);
    local ind_hi:1; read_direct_noemu(ind_hi, offset + 1);
    local ind_bank:1; read_direct_noemu(ind_bank, offset + 2);

    local ea:3 = ((ind_bank << 16) | (ind_hi << 8) | ind_lo) + zext(IdxY);
    $(DEREF_EA_EXPORT8);
}
MemDPIndLongIdxRead16: [<$imm8],"Y"    is imm8 & IdxY  {
    local offset8:1 = imm8;
    local offset:4 = zext(offset8);

    local ind_lo:1; read_direct_noemu(ind_lo, offset);
    local ind_hi:1; read_direct_noemu(ind_hi, offset + 1);
    local ind_bank:1; read_direct_noemu(ind_bank, offset + 2);

    local ea_lo:3 = ((ind_bank << 16) | (ind_hi << 8) | ind_lo) + zext(IdxY);
    local ea_hi:3 = ea_lo + 1;
    $(DEREF_EA_EXPORT16);
}

# Immediate.
MemImmRead8: #$imm8    is imm8  {
    local imm:1 = imm8;
    export imm;
}
MemImmRead16: #$imm8    is imm16  {
    local imm:2 = imm16;
    export imm;
}
# Select the size based on MF.
MemImmReadMF: MemImmRead8    is ctx_MF=1 & MemImmRead8  {
    export MemImmRead8;
}
MemImmReadMF: MemImmRead16    is ctx_MF=0 & MemImmRead16  {
    export MemImmRead16;
}

# Stack relative.
MemSRRead8: $imm8,"S"    is imm8  {
    local imm:1 = imm8;
    local offset:4 = zext(imm);

    local data:1; read_stack(data, offset);
    export data;
}
MemSRRead16: $imm8,"S"    is imm8  {
    local imm:1 = imm8;
    local offset:4 = zext(imm);

    local data_lo:1; read_stack(data_lo, offset);
    local data_hi:1; read_stack(data_hi, offset + 1);
    $(DATA_EXPORT16);
}

# Stack relative indirect, indexed by Y.
MemSRIndRead8: ($imm8,"S"),"Y"    is imm8 & IdxY  {
    local imm:1 = imm8;
    local offset:4 = zext(imm);

    local ind_lo:1; read_stack(ind_lo, offset);
    local ind_hi:1; read_stack(ind_hi, offset + 1);
    local ind:2; pack_lo_hi(ind, ind_lo, ind_hi);

    offset = zext(ind) + zext(IdxY);
    local data:1; read_data_bank(data, offset);
    export data;
}
MemSRIndRead16: ($imm8,"S"),"Y"    is imm8 & IdxY  {
    local imm:1 = imm8;
    local offset:4 = zext(imm);

    local ind_lo:1; read_stack(ind_lo, offset);
    local ind_hi:1; read_stack(ind_hi, offset + 1);
    local ind:2; pack_lo_hi(ind, ind_lo, ind_hi);

    offset = zext(ind) + zext(IdxY);
    local data_lo:1; read_data_bank(data_lo, offset);
    local data_hi:1; read_data_bank(data_hi, offset + 1);
    $(DATA_EXPORT16);
}
